// C++ code for the Fuzzy Logic System

// Automatically generated by UNFUZZY V 3.0
// Author: Oscar Duarte (ogduartev@unal.edu.co)
// Universidad Nacional de Colombia
// Disclaimer: 
// The code generated is udes under the responsability of the user.
// It does not causes direct or indirect responsability neither for the author of UNFUZZY
// nor for Universidad Nacional de Colombia.
// 
// in order to compile xxx.cpp:
//   g++ xxx.cpp fuzzy.cpp

#include <iostream>
#include <iostream>
#include <string>
using namespace std;


#ifndef __FUZZY_H
#include "fuzzy.h"
#endif

class myFLS:public SistemaLogicaDifusa
{
public:
    myFLS();
    ~myFLS();
protected:
};

myFLS::myFLS()
{
    ConjuntoDifuso *cd;
    Difusor *dif;
    Variable *var;
    Norma *And;
    Norma *Composicion;
    Norma *Conjuncion;
    Implicacion *Implica;
    Concresor *conc;

    entradas=new Universo(1);
    salidas=new Universo(1);
    var=new Variable(4);
    var->rangoMinimo(-1.000000);
    var->rangoMaximo(1.000000);
    cd=new ConjuntoZ(-1.000000,-0.600000,-0.200000);
    var->adicionarConjuntos(cd);
    cd=new ConjuntoCampana(-0.600000,-0.200000,0.200000);
    var->adicionarConjuntos(cd);
    cd=new ConjuntoPiCampana(-0.200000,0.066667,0.333333,0.600000);
    var->adicionarConjuntos(cd);
    cd=new ConjuntoS(0.200000,0.600000,1.000000);
    var->adicionarConjuntos(cd);
    dif=new DifusorSinglenton(0.440000,0.010000);
    dif->numeroPuntos(1);
    var->difusorEntrada(dif);
    var->nombreVariable("Input 1");
    var->numeroIntervalos(25);
    entradas->adicionarVariable(var);
    var=new Variable(4);
    var->rangoMinimo(-1.000000);
    var->rangoMaximo(1.000000);
    cd=new ConjuntoL(-1.000000,-0.600000,-0.200000);
    var->adicionarConjuntos(cd);
    cd=new ConjuntoTriangulo(-0.600000,-0.200000,0.200000);
    var->adicionarConjuntos(cd);
    cd=new ConjuntoPi(-0.200000,0.066667,0.333333,0.600000);
    var->adicionarConjuntos(cd);
    cd=new ConjuntoGamma(0.200000,0.600000,1.000000);
    var->adicionarConjuntos(cd);
    var->nombreVariable("Output 1");
    var->numeroIntervalos(25);
    salidas->adicionarVariable(var);
    motor=new MaquinaInferencia(entradas,salidas,4);
    And=new Minimo();
    Composicion=new Minimo();
    Implica=new ImplicacionMinimo();
    motor->and_(And);
    motor->composicion(Composicion);
    motor->implicacion(Implica);
    motor->conjuntoEntrada(0,0,0);
    motor->conjuntoSalida(0,0,0);
    motor->conjuntoEntrada(1,0,1);
    motor->conjuntoSalida(1,0,1);
    motor->conjuntoEntrada(2,0,2);
    motor->conjuntoSalida(2,0,2);
    motor->conjuntoEntrada(3,0,3);
    motor->conjuntoSalida(3,0,3);
    motor->modificador(0,0,1.000000);
    motor->modificador(1,0,1.000000);
    motor->modificador(2,0,1.000000);
    motor->modificador(3,0,1.000000);
    concreto=new BloqueConcrecion(motor);
    Conjuncion=new Maximo();
    conc=new Altura(motor,0,Conjuncion);
    concreto->adicionarConcresor(conc);
    concreto->motor(motor);
    concreto->conjuncion(Conjuncion);
}

myFLS::~myFLS()
{
}

int main()
{
    float *entra;
    float *sale;
    myFLS *sistema;
    int NumeroEntradas;
    int NumeroSalidas;
    sistema=new myFLS();
    NumeroEntradas=sistema->numeroEntradas();
    NumeroSalidas=sistema->numeroSalidas();
    entra=new float[NumeroEntradas];
    sale=new float[NumeroSalidas];
    int i;
    char q='s';
    while(q=='s')
    {
        for(i=0;i<NumeroEntradas;i++)
        {
            cout << sistema->nombreVariableEntrada(i) << " : ";
            cin >> entra[i];
        }
        sistema->calcular(entra,sale);
        for(i=0;i<NumeroSalidas;i++)
        {
            cout << sistema->nombreVariableSalida(i) << " : ";
            cout << sale[i] << "\n";
        }
        cout << "Do you want another calculus? (s/n)";
        cin >> q;
    }
    delete[] entra;
    delete[] sale;
    return 0;
}

